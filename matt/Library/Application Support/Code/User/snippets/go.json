{
  "Check if error is not nil": {
    "prefix": "ife",
    "body": [
      "if err != nil {",
      "\t$1",
      "}"
    ]
  },
  "Check if error is not nil and return it": {
    "prefix": "ifer",
    "body": [
      "if err != nil {",
      "\treturn err",
      "}"
    ]
  },
  "println": {
    "prefix": "pl",
    "body": "fmt.Println($1)"
  },
  "printf": {
    "prefix": "pf",
    "body": "fmt.Printf($1)"
  },
  "printf go code": {
    "prefix": "pfd",
    "body": "fmt.Printf(\"%#v\\n\", $1)"
  },
  "function": {
    "prefix": "fn",
    "body": [
      "// $1",
      "func $2($3) $4 {",
      "\t$5",
      "}"
    ]
  },
  "test function": {
    "prefix": "tfn",
    "body": [
      "// Test function for the $1 function",
      "func Test$2(t *testing.T) {",
      "\t$3",
      "}"
    ]
  },
  "iterate over data": {
    "prefix": "it",
    "body": [
      "for _, $1 := range $2 {",
      "\t$3",
      "}"
    ]
  },
  "type": {
    "prefix": "tp",
    "body": [
      "// Outline for a $1",
      "type $2 struct {",
      "\t$3",
      "}"
    ]
  },
  "assertion": {
    "prefix": "as",
    "body": "assert.Equal(t, ${1:expected}, ${2: actual})"
  },
  "if error log fatal": {
    "prefix": "ifel",
    "body": [
      "if err != nil {",
      "\tlog.Fatal(err)",
      "}"
    ]
  },
  "check if a file/folder doesn't exist": {
    "prefix": "fcheck",
    "body": [
      "if _, err := os.Stat($1); os.IsNotExist(err) {",
      "\t$2",
      "}"
    ]
  },
  "tag": {
    "prefix": "ta",
    "body": "`$1:\"$2\"`"
  }
}
